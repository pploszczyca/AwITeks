/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, {AxiosInstance, AxiosPromise, AxiosRequestConfig} from 'axios';
import {Configuration} from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
    assertParamExists,
    createRequestFunction,
    DUMMY_BASE_URL,
    serializeDataIfNeeded,
    setApiKeyToObject,
    setBasicAuthToObject,
    setBearerAuthToObject,
    setOAuthToObject,
    setSearchParams,
    toPathString
} from '../common';
// @ts-ignore
import {BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError} from '../base';
// @ts-ignore
// @ts-ignore
// @ts-ignore
import {AuthResponse, UserLoginRequestBody, UserRegisterRequestBody} from '../models';

/**
 * AuthControllerApi - axios parameter creator
 * @export
 */
export const AuthControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Login user
         * @param {UserLoginRequestBody} userLoginRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (userLoginRequestBody: UserLoginRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userLoginRequestBody' is not null or undefined
            assertParamExists('login', 'userLoginRequestBody', userLoginRequestBody)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userLoginRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register user
         * @param {UserRegisterRequestBody} userRegisterRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (userRegisterRequestBody: UserRegisterRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userRegisterRequestBody' is not null or undefined
            assertParamExists('register', 'userRegisterRequestBody', userRegisterRequestBody)
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRegisterRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthControllerApi - functional programming interface
 * @export
 */
export const AuthControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Login user
         * @param {UserLoginRequestBody} userLoginRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(userLoginRequestBody: UserLoginRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(userLoginRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Register user
         * @param {UserRegisterRequestBody} userRegisterRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(userRegisterRequestBody: UserRegisterRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(userRegisterRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthControllerApi - factory interface
 * @export
 */
export const AuthControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Login user
         * @param {UserLoginRequestBody} userLoginRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(userLoginRequestBody: UserLoginRequestBody, options?: any): AxiosPromise<AuthResponse> {
            return localVarFp.login(userLoginRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register user
         * @param {UserRegisterRequestBody} userRegisterRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(userRegisterRequestBody: UserRegisterRequestBody, options?: any): AxiosPromise<AuthResponse> {
            return localVarFp.register(userRegisterRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthControllerApi - object-oriented interface
 * @export
 * @class AuthControllerApi
 * @extends {BaseAPI}
 */
export class AuthControllerApi extends BaseAPI {
    /**
     * 
     * @summary Login user
     * @param {UserLoginRequestBody} userLoginRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public login(userLoginRequestBody: UserLoginRequestBody, options?: AxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).login(userLoginRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register user
     * @param {UserRegisterRequestBody} userRegisterRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public register(userRegisterRequestBody: UserRegisterRequestBody, options?: AxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).register(userRegisterRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}
