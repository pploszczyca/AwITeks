/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddPostRequestBody } from '../models';
// @ts-ignore
import { AddThreadRequestBody } from '../models';
// @ts-ignore
import { ForumPost } from '../models';
// @ts-ignore
import { ForumThread } from '../models';
// @ts-ignore
import { ForumThreadSummaryResponseBody } from '../models';
/**
 * ForumControllerApi - axios parameter creator
 * @export
 */
export const ForumControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add post to thread
         * @param {number} threadId 
         * @param {AddPostRequestBody} addPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPostToThread: async (threadId: number, addPostRequestBody: AddPostRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'threadId' is not null or undefined
            assertParamExists('addPostToThread', 'threadId', threadId)
            // verify required parameter 'addPostRequestBody' is not null or undefined
            assertParamExists('addPostToThread', 'addPostRequestBody', addPostRequestBody)
            const localVarPath = `/forum/{threadId}`
                .replace(`{${"threadId"}}`, encodeURIComponent(String(threadId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addPostRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new thread with initial post
         * @param {AddThreadRequestBody} addThreadRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addThread: async (addThreadRequestBody: AddThreadRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addThreadRequestBody' is not null or undefined
            assertParamExists('addThread', 'addThreadRequestBody', addThreadRequestBody)
            const localVarPath = `/forum`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addThreadRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit post
         * @param {number} threadId 
         * @param {number} postId 
         * @param {AddPostRequestBody} addPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editPost: async (threadId: number, postId: number, addPostRequestBody: AddPostRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'threadId' is not null or undefined
            assertParamExists('editPost', 'threadId', threadId)
            // verify required parameter 'postId' is not null or undefined
            assertParamExists('editPost', 'postId', postId)
            // verify required parameter 'addPostRequestBody' is not null or undefined
            assertParamExists('editPost', 'addPostRequestBody', addPostRequestBody)
            const localVarPath = `/forum/{threadId}/{postId}/edit`
                .replace(`{${"threadId"}}`, encodeURIComponent(String(threadId)))
                .replace(`{${"postId"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addPostRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all forum threads
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllThreads: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/forum`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT_AUTH required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all posts for given thread
         * @param {number} threadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostsFromThread: async (threadId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'threadId' is not null or undefined
            assertParamExists('getPostsFromThread', 'threadId', threadId)
            const localVarPath = `/forum/{threadId}/posts`
                .replace(`{${"threadId"}}`, encodeURIComponent(String(threadId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get thread by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThread: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getThread', 'id', id)
            const localVarPath = `/forum/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all threads with matching names
         * @param {string} [searchKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThreadsWithMatchingName: async (searchKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/forum/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchKey !== undefined) {
                localVarQueryParameter['searchKey'] = searchKey;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ForumControllerApi - functional programming interface
 * @export
 */
export const ForumControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ForumControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add post to thread
         * @param {number} threadId 
         * @param {AddPostRequestBody} addPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPostToThread(threadId: number, addPostRequestBody: AddPostRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ForumPost>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPostToThread(threadId, addPostRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new thread with initial post
         * @param {AddThreadRequestBody} addThreadRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addThread(addThreadRequestBody: AddThreadRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ForumThread>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addThread(addThreadRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Edit post
         * @param {number} threadId 
         * @param {number} postId 
         * @param {AddPostRequestBody} addPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editPost(threadId: number, postId: number, addPostRequestBody: AddPostRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ForumPost>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editPost(threadId, postId, addPostRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all forum threads
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllThreads(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ForumThreadSummaryResponseBody>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllThreads(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all posts for given thread
         * @param {number} threadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPostsFromThread(threadId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ForumPost>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPostsFromThread(threadId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get thread by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getThread(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ForumThread>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getThread(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all threads with matching names
         * @param {string} [searchKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getThreadsWithMatchingName(searchKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ForumThreadSummaryResponseBody>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getThreadsWithMatchingName(searchKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ForumControllerApi - factory interface
 * @export
 */
export const ForumControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ForumControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Add post to thread
         * @param {number} threadId 
         * @param {AddPostRequestBody} addPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPostToThread(threadId: number, addPostRequestBody: AddPostRequestBody, options?: any): AxiosPromise<ForumPost> {
            return localVarFp.addPostToThread(threadId, addPostRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new thread with initial post
         * @param {AddThreadRequestBody} addThreadRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addThread(addThreadRequestBody: AddThreadRequestBody, options?: any): AxiosPromise<ForumThread> {
            return localVarFp.addThread(addThreadRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit post
         * @param {number} threadId 
         * @param {number} postId 
         * @param {AddPostRequestBody} addPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editPost(threadId: number, postId: number, addPostRequestBody: AddPostRequestBody, options?: any): AxiosPromise<ForumPost> {
            return localVarFp.editPost(threadId, postId, addPostRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all forum threads
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllThreads(options?: any): AxiosPromise<Array<ForumThreadSummaryResponseBody>> {
            return localVarFp.getAllThreads(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all posts for given thread
         * @param {number} threadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostsFromThread(threadId: number, options?: any): AxiosPromise<Array<ForumPost>> {
            return localVarFp.getPostsFromThread(threadId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get thread by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThread(id: number, options?: any): AxiosPromise<ForumThread> {
            return localVarFp.getThread(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all threads with matching names
         * @param {string} [searchKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThreadsWithMatchingName(searchKey?: string, options?: any): AxiosPromise<Array<ForumThreadSummaryResponseBody>> {
            return localVarFp.getThreadsWithMatchingName(searchKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ForumControllerApi - object-oriented interface
 * @export
 * @class ForumControllerApi
 * @extends {BaseAPI}
 */
export class ForumControllerApi extends BaseAPI {
    /**
     * 
     * @summary Add post to thread
     * @param {number} threadId 
     * @param {AddPostRequestBody} addPostRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ForumControllerApi
     */
    public addPostToThread(threadId: number, addPostRequestBody: AddPostRequestBody, options?: AxiosRequestConfig) {
        return ForumControllerApiFp(this.configuration).addPostToThread(threadId, addPostRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new thread with initial post
     * @param {AddThreadRequestBody} addThreadRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ForumControllerApi
     */
    public addThread(addThreadRequestBody: AddThreadRequestBody, options?: AxiosRequestConfig) {
        return ForumControllerApiFp(this.configuration).addThread(addThreadRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit post
     * @param {number} threadId 
     * @param {number} postId 
     * @param {AddPostRequestBody} addPostRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ForumControllerApi
     */
    public editPost(threadId: number, postId: number, addPostRequestBody: AddPostRequestBody, options?: AxiosRequestConfig) {
        return ForumControllerApiFp(this.configuration).editPost(threadId, postId, addPostRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all forum threads
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ForumControllerApi
     */
    public getAllThreads(options?: AxiosRequestConfig) {
        return ForumControllerApiFp(this.configuration).getAllThreads(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all posts for given thread
     * @param {number} threadId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ForumControllerApi
     */
    public getPostsFromThread(threadId: number, options?: AxiosRequestConfig) {
        return ForumControllerApiFp(this.configuration).getPostsFromThread(threadId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get thread by id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ForumControllerApi
     */
    public getThread(id: number, options?: AxiosRequestConfig) {
        return ForumControllerApiFp(this.configuration).getThread(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all threads with matching names
     * @param {string} [searchKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ForumControllerApi
     */
    public getThreadsWithMatchingName(searchKey?: string, options?: AxiosRequestConfig) {
        return ForumControllerApiFp(this.configuration).getThreadsWithMatchingName(searchKey, options).then((request) => request(this.axios, this.basePath));
    }
}
